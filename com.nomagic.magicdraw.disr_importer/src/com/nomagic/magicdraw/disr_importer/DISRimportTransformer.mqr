package com.nomagic.magicdraw.disr_importer;

import java.text.*;
import org.eclipse.emf.ecore.EObject;

public ruleset DISRimportTransformer(in disr_excel : excel, inout md_model : uml21 ) {

	public rule import()
	{
		@importFromExcel(disr_excel, md_model);
	}
	
	// lookup a Stereotype instance from a given model using the String name of that instance
	private rule getStereoByName(name : String, within_model : uml21) : uml21.Stereotype {
		
		if ((null == name) || (name.isEmpty()))
		{
			return null;
		}
		
		return within_model.getInstances("Stereotype").detect("name", name);
	}

	// lookup a Column index from a given excel using the String name of that column	
	private rule columnIdByName(name : String, excel_model : excel) : Integer {
		
		if ((null != name) && (!name.isEmpty()))
		{
			var firstRow : excel.Row = excel_model.getInstances("Row").first();
			
			if (null != firstRow)
			{
				var soughtColumn : excel.Column = firstRow.getCells().detect("value", name).column;
				
				if (null != soughtColumn)
				{
					return soughtColumn.getColumnIndex();
				}
			}
		}
				
		return -1;
	}
	
	// add an ISO8601DateTime when applicable
	private rule createIsoDateTime(name : String, cellDate : String, dst_model : uml21) : uml21.LiteralString
	{
		if ((null == cellDate) || cellDate.isEmpty())
		{
			return null;
		}

		// format the date into a quasi ISO8601 date
		var formatter : SimpleDateFormat = "yyyy-MM-dd";
 		var convertedDate : java.util.Date = cellDate; // formatter.parse(cellDate);

		// create a new LiteralString that will become the ISO8601DateTime instance
		var isoDate : uml21.LiteralString = dst_model.create("LiteralString");

		if (null != isoDate)
		{				
			isoDate.name = name;
 			isoDate.value = convertedDate;
		}
			
 		return isoDate;
	}
	
	private rule cellValueAsString( cellList : com.sodius.mdw.corext.model.emf.MDWEObjectContainmentWithInverseEList, field : String, src_model : excel ) : String
	{
		var value : String = "";
		var columnId : Integer = @columnIdByName(field, src_model);
		
		if (0 <= columnId)
		{
			value = cellList[columnId].value;
			
			if ((null == value) || (value.isEmpty()))
			{
				value = "";
			}
		}
			
		return value;
	}
	
	private rule applyAndGetStereoApplication(element : uml21.Element, stereo : uml21.Stereotype) : EObject
	{
		var stereoApplication : EObject = null;
		
		if (null != element)
		{
			// get the application if it is already applied
			stereoApplication = element.getStereotypeApplication(stereo);
			
			if (null == stereoApplication)
			{
				// apply the stereotype first and then get the application
	 			element.applyStereotype(stereo);
	 			
	 			stereoApplication = element.getStereotypeApplication(stereo);
			}
		}
	 				
 		return stereoApplication;
	}

	private rule setDynamicObjectStringFeatureByName(dynObject : EObject, feature : String, value : String)
	{
		if (null != dynObject)
		{
			var idFeature : org.eclipse.emf.ecore.EStructuralFeature =
				dynObject.eClass().getEStructuralFeature(feature);
		
			dynObject.eSet(idFeature, value);
		}
	}		
		
	private rule setDynamicObjectStringListFeatureByName(dynObject : EObject, feature : String, value : com.sodius.mdw.core.model.DefaultMDWList)
	{
		if (null != dynObject)
		{
			var idFeature : org.eclipse.emf.ecore.EStructuralFeature =
				dynObject.eClass().getEStructuralFeature(feature);
		
			// shed any entries in the list that are empty strings
			value.removeAll([""]);
			
			dynObject.eSet(idFeature, value);
		}
	}		
		
	private rule setDynamicObjectFeatureByName(dynObject : EObject, feature : String, value : EObject)
	{
		if (null != dynObject)
		{
			var idFeature : org.eclipse.emf.ecore.EStructuralFeature =
				dynObject.eClass().getEStructuralFeature(feature);
		
			dynObject.eSet(idFeature, value);
		}
	}		
		
	public rule importFromExcel(src_model : excel, dst_model : uml21) {
		
		var magicDrawProfile : uml21.Package = dst_model.getInstances("Profile").detect("name", "MagicDraw Profile");
		
		if (null == magicDrawProfile)
		{
			System.out.println("Missing 'MagicDraw Profile' in Destination Model " + dst_model);
			return;
		}
		
		var updmProfile : uml21.Package = dst_model.getInstances("Profile").detect("name", "UPDM Profile");
		
		if (null == updmProfile)
		{
			System.out.println("Missing 'UPDM Profile' in Destination Model " + dst_model);
			return;
		}
		
		var updmExtraProfile : uml21.Package = dst_model.getInstances("Profile").detect("name", "Extra stereotypes");

		if (null == updmExtraProfile)
		{
			System.out.println("Missing 'Extra stereotypes' Profile in Destination Model " + dst_model);
			return;
		}
		
		var libraryStereo = @getStereoByName("elementsLibrary", dst_model);
		
		if (null == libraryStereo)
		{
			System.out.println("Missing <<elementsLibrary>> Stereotype in Destination Model " + dst_model);
			return;
		}
		
		var techStandardStereo = @getStereoByName("TechnicalStandard", dst_model);
		
		if (null == techStandardStereo)
		{
			System.out.println("Missing <<TechnicalStandard>> Stereotype in Destination Model " + dst_model);
			return;
		}

		var timelineStereo = @getStereoByName("TimeLine", dst_model);
		
		if (null == timelineStereo)
		{
			System.out.println("Missing <<TimeLine>> Stereotype in Destination Model " + dst_model);
			return;
		}
		
		var isoDateStereo = @getStereoByName("ISO8601DateTime", dst_model);
		
		if (null == isoDateStereo)
		{
			System.out.println("Missing <<ISO8601DateTime>> Stereotype in Destination Model " + dst_model);
			return;
		}
	
		var rootPackage : uml21.Package = dst_model.getInstances("Model").detect("name", "Data");
	
		// obtain the existing Standards package or create a new one if it isn't present
		var standardsPackage : uml21.Package = rootPackage.getNestedPackage("Standards");
		
		if (null == standardsPackage)
		{
			standardsPackage = rootPackage.createNestedPackage("Standards");
		}

		standardsPackage.applyProfile(magicDrawProfile);
		standardsPackage.applyProfile(updmProfile);
		standardsPackage.applyProfile(updmExtraProfile);			
		
		// obtain the existing Dates package or create a new one if it isn't present
		var datesPackage : uml21.Package = standardsPackage.getNestedPackage("Dates");
		
		if (null == datesPackage)
		{
			datesPackage = standardsPackage.createNestedPackage("Dates");
		}

		datesPackage.applyStereotype(timelineStereo);			
		
		// disr_lib.applyStereotype(libraryStereo);
		// standardsPackage.applyStereotype(libraryStereo);
		
		// foreach row of the provided excel file except for the very first row
		foreach (row : excel.Row in
			src_model.getInstances("Row").subList(1, src_model.getInstances("Row").size())) {
			
			cellList = row.getCells();
			
			if (cellList.size() > 1) {
				
				var techStdName : String = cellList[@columnIdByName("Standard Title", src_model)].value;
				
				// obtain the existing TechnicalStandard or create a new one if it isn't present
				var techStd : uml21.Class = standardsPackage.getOwnedMember(techStdName);
				var appliedTechStd : EObject;
				
				if (null == techStd)
				{
					techStd = standardsPackage.createOwnedClass(techStdName, false);

					// apply the <<UPDMElement>>, <<Standard>>, and the <<TechnicalStandard>> stereotypes to the new Class
					appliedTechStd = @applyAndGetStereoApplication(techStd, techStandardStereo);		
				}
				else
				{
					appliedTechStd = techStd.getStereotypeApplication(techStandardStereo);
					appliedTechStd = @applyAndGetStereoApplication(techStd, techStandardStereo);							
				}
				
				@setDynamicObjectStringFeatureByName(appliedTechStd, "shortName",
					@cellValueAsString(cellList, "Standard Identifier", src_model));
				
				@setDynamicObjectStringListFeatureByName(appliedTechStd, "InformationTechnologyStandardCategory",
					[cellList[@columnIdByName("Primary Reviewing TWG", src_model)].value,
						cellList[@columnIdByName("TWG Secondary Interests", src_model)].value]);
					
				@setDynamicObjectStringFeatureByName(appliedTechStd, "currentStatus",
					@cellValueAsString(cellList, "DoD Status", src_model));
					
				// if the TechnicalStandard has an existing mandatedDate
				if (false)
				{
					// unset the mandatedDate and remove the existing date from the Dates package
				}
					
				// if there is a DoD Mandated Date then
				var cellDate : String = cellList[@columnIdByName("Date DoD Mandated", src_model)].value;
				
				if (null != cellDate)
				{
					var isoDate = @createIsoDateTime("DoD Mandate Date for " + techStd.name, cellDate, dst_model);
				
					if (null != isoDate)
					{
	     				datesPackage.packagedElement.add(isoDate);
	     				
	     				@setDynamicObjectFeatureByName(appliedTechStd, "mandatedDate",
							@applyAndGetStereoApplication(isoDate, isoDateStereo));
					}
				}
					
				// if the TechnicalStandard has an existing retiredDate
				if (false)
				{
					// unset the retiredDate and remove the existing date from the Dates package
				}
					
				cellDate = cellList[@columnIdByName("Date Retired/Inactive", src_model)].value;
				
				if (null != cellDate)
				{
					var isoDate = @createIsoDateTime("Retired Date for " + techStd.name, cellDate, dst_model);
					
					if (null != isoDate)
					{
	     				datesPackage.packagedElement.add(isoDate);
     				
	     				@setDynamicObjectFeatureByName(appliedTechStd, "retiredDate",
							@applyAndGetStereoApplication(isoDate, isoDateStereo));
					}
				}
						
				@setDynamicObjectStringFeatureByName(appliedTechStd, "version",
					@cellValueAsString(cellList, "Standard Title", src_model));
				
				// if the TechnicalStandard has an existing Comment
				if (false)
				{
					// delete that existing Comment
				}
					
				var comment : uml21.Comment = techStd.createOwnedComment();
				
				comment.setBody("ABSTRACT:\n" + cellList[@columnIdByName("Abstract", src_model)].value + "\n\nAPPLICABILITY:\n" + cellList[@columnIdByName("Applicability", src_model)].value);
				
				comment.getAnnotatedElements().add(techStd);

				var urlString : String = @cellValueAsString(cellList, "URL to Access", src_model);
				
				@setDynamicObjectStringFeatureByName(appliedTechStd, "URL_URI_", 
					urlString);
					
				// if the TechnicalStandard has an existing active hyperlink
				if (false)
				{
					// delete the existing active hyperling
				}				

				// now create the hyperlink to this URL
				var hyperlinkStereo = @getStereoByName("HyperlinkOwner", dst_model);
				
				var appliedHyperlinkOwner = @applyAndGetStereoApplication(techStd, hyperlinkStereo);
				
				@setDynamicObjectStringListFeatureByName(appliedHyperlinkOwner, "hyperlinkText", [urlString]);
				@setDynamicObjectStringFeatureByName(appliedHyperlinkOwner, "hyperlinkTextActive", urlString);
					
				System.out.println("Imported " + techStd.name + " into output model.");
			}
		}		
	}

}
